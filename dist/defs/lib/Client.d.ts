/// <reference types="node" />
import * as EventEmitter from "events";
import { TransmissionRequest, TransmissionResponse } from "./Communication";
import { Session, SessionSetOptions } from "./Session";
import { Torrent, ITorrent, SetTorrentOptions, SetLocationOptions, RenameTorrentResponse, AddTorrentOptions } from "./Torrent";
export interface ClientOptions {
    protocol?: string;
    path?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
}
export declare class Client extends EventEmitter {
    private needsAuth;
    private auth;
    private sessionID;
    options: ClientOptions;
    constructor(sessionID?: string, options?: ClientOptions);
    emit(event: "response", data: TransmissionResponse): boolean;
    emit(event: "request", data: TransmissionRequest): boolean;
    on(event: "response", listener: (data: TransmissionResponse) => void): this;
    on(event: "request", listener: (data: TransmissionRequest) => void): this;
    once(event: "response", listener: (data: TransmissionResponse) => void): this;
    once(event: "request", listener: (data: TransmissionRequest) => void): this;
    addListener(event: "response", listener: (data: TransmissionResponse) => void): this;
    addListener(event: "request", listener: (data: TransmissionRequest) => void): this;
    prependListener(event: "response", listener: (data: TransmissionResponse) => void): this;
    prependListener(event: "request", listener: (data: TransmissionRequest) => void): this;
    prependOnceListener(event: "response", listener: (data: TransmissionResponse) => void): this;
    prependOnceListener(event: "request", listener: (data: TransmissionRequest) => void): this;
    removeListener(event: "response", listener: (data: TransmissionResponse) => void): this;
    removeListener(event: "request", listener: (data: TransmissionRequest) => void): this;
    private convertIds(recent);
    private convertIds(torrent);
    private convertIds(torrents);
    private convertIds(id);
    private convertIds(ids);
    private convertIds(hash);
    private convertIds(hashes);
    getAllTorrents(fields?: string[], notFields?: string[]): Promise<Torrent[]>;
    getTorrent(recent: "recently-active", fields?: string[], notFields?: string[]): Promise<Torrent[]>;
    getTorrent(torrent: Torrent, fields?: string[], notFields?: string[]): Promise<Torrent>;
    getTorrent(torrents: Torrent[], fields?: string[], notFields?: string[]): Promise<Torrent[]>;
    getTorrent(id: number, fields?: string[], notFields?: string[]): Promise<Torrent>;
    getTorrent(ids: number[], fields?: string[], notFields?: string[]): Promise<Torrent[]>;
    getTorrent(hash: string, fields?: string[], notFields?: string[]): Promise<Torrent>;
    getTorrent(hashes: string[], fields?: string[], notFields?: string[]): Promise<Torrent[]>;
    removeTorrent(recent: "recently-active", deleteData?: boolean): Promise<void>;
    removeTorrent(torrent: Torrent, deleteData?: boolean): Promise<void>;
    removeTorrent(torrents: Torrent[], deleteData?: boolean): Promise<void>;
    removeTorrent(id: number, deleteData?: boolean): Promise<void>;
    removeTorrent(ids: number[], deleteData?: boolean): Promise<void>;
    removeTorrent(hash: string, deleteData?: boolean): Promise<void>;
    removeTorrent(hashes: string[], deleteData?: boolean): Promise<void>;
    addTorrent(file: string, options?: AddTorrentOptions): Promise<ITorrent>;
    addTorrent(file: Buffer, options?: AddTorrentOptions): Promise<ITorrent>;
    setTorrentLocation(recent: "recently-active", options: SetLocationOptions): Promise<void>;
    setTorrentLocation(torrent: Torrent, options: SetLocationOptions): Promise<void>;
    setTorrentLocation(torrents: Torrent[], options: SetLocationOptions): Promise<void>;
    setTorrentLocation(id: number, options: SetLocationOptions): Promise<void>;
    setTorrentLocation(ids: number[], options: SetLocationOptions): Promise<void>;
    setTorrentLocation(hash: string, options: SetLocationOptions): Promise<void>;
    setTorrentLocation(hashes: string[], options: SetLocationOptions): Promise<void>;
    renameTorrentPath(hash: string, path: string, name: string): Promise<RenameTorrentResponse>;
    renameTorrentPath(torrent: Torrent, path: string, name: string): Promise<RenameTorrentResponse>;
    renameTorrentPath(id: number, path: string, name: string): Promise<RenameTorrentResponse>;
    setTorrentProperties(recent: "recently-active", options: SetTorrentOptions): Promise<void>;
    setTorrentProperties(torrent: Torrent, options: SetTorrentOptions): Promise<void>;
    setTorrentProperties(torrents: Torrent[], options: SetTorrentOptions): Promise<void>;
    setTorrentProperties(id: number, options: SetTorrentOptions): Promise<void>;
    setTorrentProperties(ids: number[], options: SetTorrentOptions): Promise<void>;
    setTorrentProperties(hash: string, options: SetTorrentOptions): Promise<void>;
    setTorrentProperties(hashes: string[], options: SetTorrentOptions): Promise<void>;
    getSession(): Promise<Session>;
    setSessionProperties(options: SessionSetOptions): Promise<void>;
    sendRequest(trequest: TransmissionRequest): Promise<TransmissionResponse>;
}
