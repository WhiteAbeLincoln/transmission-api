"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Communication_1 = require("./Communication");
class Session {
    constructor(client) {
        this.client = client;
        this[Symbol.toStringTag] = "Session";
    }
    get "alt-speed-down"() { return this._session["alt-speed-down"]; }
    get "alt-speed-enabled"() { return this._session["alt-speed-enabled"]; }
    get "alt-speed-time-begin"() { return this._session["alt-speed-time-begin"]; }
    get "alt-speed-time-day"() { return this._session["alt-speed-time-day"]; }
    get "alt-speed-time-enabled"() { return this._session["alt-speed-time-enabled"]; }
    get "alt-speed-time-end"() { return this._session["alt-speed-time-end"]; }
    get "alt-speed-up"() { return this._session["alt-speed-up"]; }
    get "blocklist-enabled"() { return this._session["blocklist-enabled"]; }
    get "blocklist-size"() { return this._session["blocklist-size"]; }
    get "blocklist-url"() { return this._session["blocklist-url"]; }
    get "cache-size-mb"() { return this._session["cache-size-mb"]; }
    get "config-dir"() { return this._session["config-dir"]; }
    get "dht-enabled"() { return this._session["dht-enabled"]; }
    get "download-dir"() { return this._session["download-dir"]; }
    get "download-dir-free-space"() { return this._session["download-dir-free-space"]; }
    get "download-queue-enabled"() { return this._session["download-queue-enabled"]; }
    get "download-queue-size"() { return this._session["download-queue-size"]; }
    get encryption() { return this._session["encryption"]; }
    get "idle-seeding-limit"() { return this._session["idle-seeding-limit"]; }
    get "idle-seeding-limit-enabled"() { return this._session["idle-seeding-limit-enabled"]; }
    get "incomplete-dir"() { return this._session["incomplete-dir"]; }
    get "incomplete-dir-enabled"() { return this._session["incomplete-dir-enabled"]; }
    get "lpd-enabled"() { return this._session["lpd-enabled"]; }
    get "peer-limit-global"() { return this._session["peer-limit-global"]; }
    get "peer-limit-per-torrent"() { return this._session["peer-limit-per-torrent"]; }
    get "peer-port"() { return this._session["peer-port"]; }
    get "peer-port-random-on-start"() { return this._session["peer-port-random-on-start"]; }
    get "pex-enabled"() { return this._session["pex-enabled"]; }
    get "port-forwarding-enabled"() { return this._session["port-forwarding-enabled"]; }
    get "queue-stalled-enabled"() { return this._session["queue-stalled-enabled"]; }
    get "queue-stalled-minutes"() { return this._session["queue-stalled-minutes"]; }
    get "rename-partial-files"() { return this._session["rename-partial-files"]; }
    get "rpc-version"() { return this._session["rpc-version"]; }
    get "rpc-version-minimum"() { return this._session["rpc-version-minimum"]; }
    get "seed-queue-enabled"() { return this._session["seed-queue-enabled"]; }
    get "seed-queue-size"() { return this._session["seed-queue-size"]; }
    get seedRatioLimit() { return this._session["seedRatioLimit"]; }
    get seedRatioLimited() { return this._session["seedRatioLimited"]; }
    get "speed-limit-down"() { return this._session["speed-limit-down"]; }
    get "speed-limit-down-enabled"() { return this._session["speed-limit-down-enabled"]; }
    get "speed-limit-up"() { return this._session["speed-limit-up"]; }
    get "speed-limit-up-enabled"() { return this._session["speed-limit-up-enabled"]; }
    get "start-added-torrents"() { return this._session["start-added-torrents"]; }
    get "utp-enabled"() { return this._session["utp-enabled"]; }
    get version() { return this._session.version; }
    ;
    get "script-torrent-done-enabled"() { return this._session["script-torrent-done-enabled"]; }
    get "script-torrent-done-filename"() { return this._session["script-torrent-done-filename"]; }
    get "trash-original-torrent-files"() { return this._session["trash-original-torrent-files"]; }
    get units() { return this._session.units; }
    ;
    get altSpeedDown() { return this._session["alt-speed-down"]; }
    get altSpeedEnabled() { return this._session["alt-speed-enabled"]; }
    get altSpeedScheduledBegin() { return this._session["alt-speed-time-begin"]; }
    get altSpeedScheduledOnDays() { return this._session["alt-speed-time-day"]; }
    get altSpeedScheduledEnabled() { return this._session["alt-speed-time-enabled"]; }
    get altSpeedScheduledEnd() { return this._session["alt-speed-time-end"]; }
    get altSpeedUp() { return this._session["alt-speed-up"]; }
    get blocklistEnabled() { return this._session["blocklist-enabled"]; }
    get blocklistSize() { return this._session["blocklist-size"]; }
    get blocklistURL() { return this._session["blocklist-url"]; }
    get cacheSize() { return this._session["cache-size-mb"]; }
    get configDir() { return this._session["config-dir"]; }
    get dhtEnabled() { return this._session["dht-enabled"]; }
    get downloadDir() { return this._session["download-dir"]; }
    get downloadDirFreeSpace() { return this._session["download-dir-free-space"]; }
    get downloadQueueEnabled() { return this._session["download-queue-enabled"]; }
    get downloadQueueSize() { return this._session["download-queue-size"]; }
    get idleSeedingLimit() { return this._session["idle-seeding-limit"]; }
    get idleSeedingLimitEnabled() { return this._session["idle-seeding-limit-enabled"]; }
    get incompleteDir() { return this._session["incomplete-dir"]; }
    get incompleteDirEnabled() { return this._session["incomplete-dir-enabled"]; }
    get lpdEnabled() { return this._session["lpd-enabled"]; }
    get globalPeerLimit() { return this._session["peer-limit-global"]; }
    get torrentPeerLimit() { return this._session["peer-limit-per-torrent"]; }
    get peerPort() { return this._session["peer-port"]; }
    get randomPeerPortEnabled() { return this._session["peer-port-random-on-start"]; }
    get pexEnabled() { return this._session["pex-enabled"]; }
    get portForwardingEnabled() { return this._session["port-forwarding-enabled"]; }
    get queueStalledEnabled() { return this._session["queue-stalled-enabled"]; }
    get minutesQueueStalled() { return this._session["queue-stalled-minutes"]; }
    get renamePartialFiles() { return this._session["rename-partial-files"]; }
    get rpcVersion() { return this._session["rpc-version"]; }
    get minimumRPCVersion() { return this._session["rpc-version-minimum"]; }
    get callScriptOnTorrentCompletion() { return this._session["script-torrent-done-enabled"]; }
    get torrentScriptFilename() { return this._session["script-torrent-done-filename"]; }
    get seedQueueEnabled() { return this._session["seed-queue-enabled"]; }
    get seedQueueSize() { return this._session["seed-queue-size"]; }
    get speedLimitDown() { return this._session["speed-limit-down"]; }
    get speedLimitDownEnabled() { return this._session["speed-limit-down-enabled"]; }
    get speedLimitUp() { return this._session["speed-limit-up"]; }
    get speedLimitUpEnabled() { return this._session["speed-limit-up-enabled"]; }
    get startAddedTorrents() { return this._session["start-added-torrents"]; }
    get trashTorrentFiles() { return this._session["trash-original-torrent-files"]; }
    get utpEnabled() { return this._session["utp-enabled"]; }
    setEncryption(type) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "encryption": type }); });
    }
    setAltSpeedDown(speed) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "alt-speed-down": speed }); });
    }
    setAltSpeedEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "alt-speed-enabled": enabled }); });
    }
    setAltSpeedScheduledBegin(time) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "alt-speed-time-begin": time }); });
    }
    setAltSpeedScheduledOnDays(day) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "alt-speed-time-day": day }); });
    }
    setAltSpeedScheduledEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "alt-speed-time-enabled": enabled }); });
    }
    setAltSpeedScheduledEnd(time) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "alt-speed-time-end": time }); });
    }
    setAltSpeedUp(speed) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "alt-speed-up": speed }); });
    }
    setBlocklistEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "blocklist-enabled": enabled }); });
    }
    setBlocklistURL(url) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "blocklist-url": url }); });
    }
    setCacheSize(size) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "cache-size-mb": size }); });
    }
    setDHTEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "dht-enabled": enabled }); });
    }
    setDownloadDir(dir) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "download-dir": dir }); });
    }
    setDownloadQueueEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "download-queue-enabled": enabled }); });
    }
    setDownloadQueueSize(size) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "download-queue-size": size }); });
    }
    setIdleSeedingLimit(limit) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "idle-seeding-limit": limit }); });
    }
    setIdleSeedingLimitEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "idle-seeding-limit-enabled": enabled }); });
    }
    setIncompleteDir(dir) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "incomplete-dir": dir }); });
    }
    setIncompleteDirEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "incomplete-dir-enabled": enabled }); });
    }
    setLPDEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "lpd-enabled": enabled }); });
    }
    setGlobalPeerLimit(limit) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "peer-limit-global": limit }); });
    }
    setTorrentPeerLimit(limit) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "peer-limit-per-torrent": limit }); });
    }
    setPeerPort(port) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "peer-port": port }); });
    }
    setRandomPeerPortEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "peer-port-random-on-start": enabled }); });
    }
    setPEXEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "pex-enabled": enabled }); });
    }
    setPortForwardingEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "port-forwarding-enabled": enabled }); });
    }
    setQueueStalledEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "queue-stalled-enabled": enabled }); });
    }
    setQueueStalledMinutes(minutes) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "queue-stalled-minutes": minutes }); });
    }
    setRenamePartialFiles(rename) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "rename-partial-files": rename }); });
    }
    setCallScriptOnCompletion(call) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "script-torrent-done-enabled": call }); });
    }
    setScriptFilename(name) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "script-torrent-done-filename": name }); });
    }
    setSeedQueueEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "seed-queue-enabled": enabled }); });
    }
    setSeedQueueSize(size) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "seed-queue-size": size }); });
    }
    setSpeedLimitDown(limit) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "speed-limit-down": limit }); });
    }
    setSpeedLimitDownEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "speed-limit-down-enabled": enabled }); });
    }
    setSpeedLimitUp(limit) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "speed-limit-up": limit }); });
    }
    setSpeedLimitUpEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "speed-limit-up-enabled": enabled }); });
    }
    setStartAddedTorrents(start) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "start-added-torrents": start }); });
    }
    setTrashTorrentFiles(trash) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "trash-original-torrent-files": trash }); });
    }
    setUTPEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () { this.setSessionProperties({ "utp-enabled": enabled }); });
    }
    setSessionProperties(options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.setSessionProperties(options);
        });
    }
    deserialize(input) {
        if (typeof input === "string")
            input = JSON.parse(input);
        this._session = Object.assign({}, this._session, input);
        return this;
    }
    serialize() {
        return JSON.stringify(this);
    }
    toJSON() {
        return this._session;
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented.");
        });
    }
    getStatistics() {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("session-stats", {});
            let res = yield this.client.sendRequest(req);
            var element = res.arguments;
            return element;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("session-close", {});
            yield this.client.sendRequest(req);
        });
    }
    isPortOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("port-test", {});
            let res = yield this.client.sendRequest(req);
            return res.arguments["port-is-open"];
        });
    }
    updateBlocklist() {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("blocklist-update", {});
            let res = yield this.client.sendRequest(req);
            return res.arguments["blocklist-size"];
        });
    }
}
exports.Session = Session;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
