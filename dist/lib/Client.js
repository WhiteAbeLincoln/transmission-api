"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const sd = require("string_decoder");
const EventEmitter = require("events");
const url = require("url");
const fs = require("fs");
const Communication_1 = require("./Communication");
const Session_1 = require("./Session");
const Torrent_1 = require("./Torrent");
const defaultOpts = {
    protocol: "http:",
    host: "127.0.0.1",
    path: "/transmission/rpc",
    port: 9091,
    username: null,
    password: null
};
const defaultFields = [
    "activityDate", "addedDate", "bandwidthPriority", "comment",
    "corruptEver", "creator", "dateCreated", "desiredAvailable",
    "doneDate", "downloadDir", "downloadedEver", "downloadLimit",
    "downloadLimited", "error", "errorString", "eta",
    "etaIdle", "files", "fileStats", "hashString",
    "haveUnchecked", "haveValid", "honorsSessionLimits",
    "isFinished", "isPrivate", "isStalled", "leftUntilDone",
    "magnetLink", "manualAnnounceTime", "maxConnectedPeers",
    "metadataPercentComplete", "name", "peer-limit", "peers",
    "peersConnected", "peersFrom", "peersGettingFromUs",
    "peersSendingToUs", "percentDone", "pieces", "pieceCount",
    "pieceSize", "priorities", "queuePosition", "rateDownload",
    "rateUpload", "recheckProgress", "secondsDownloading",
    "secondsSeeding", "seedIdleLimit", "seedIdleMode", "seedRatioLimit",
    "seedRatioMode", "sizeWhenDone", "startDate", "status",
    "trackers", "trackerStats", "totalSize", "torrentFile",
    "uploadedEver", "uploadLimit", "uploadLimited", "uploadRatio",
    "wanted", "webseeds", "webseedsSendingToUs"
];
class Client extends EventEmitter {
    constructor(sessionID = null, options = defaultOpts) {
        super();
        this.needsAuth = false;
        this.options = Object.assign({}, defaultOpts, options);
        if (sessionID)
            this.sessionID = sessionID;
        if (options.username) {
            this.needsAuth = true;
            this.auth = options.username + ":" + options.password;
        }
    }
    emit(event, data) { return super.emit(event, data); }
    on(event, listener) { return super.on(event, listener); }
    once(event, listener) { return super.once(event, listener); }
    addListener(event, listener) { return super.addListener(event, listener); }
    prependListener(event, listener) { return super.prependListener(event, listener); }
    prependOnceListener(event, listener) { return super.prependOnceListener(event, listener); }
    removeListener(event, listener) { return super.removeListener(event, listener); }
    convertIds(ids) {
        if (Array.isArray(ids) && ids.length == 0) {
            ids = null;
        }
        if (ids) {
            if (typeof ids === "object" && !Array.isArray(ids)) {
                ids = ids.id;
            }
            else if (Array.isArray(ids) && typeof ids[0] === "object") {
                ids = ids.map(elem => { return elem.id; });
            }
        }
        return ids;
    }
    getAllTorrents(fields = defaultFields, notFields = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let torrents = yield this.getTorrent(null, fields, notFields);
            if (!torrents.length)
                return [torrents];
            else
                return torrents;
        });
    }
    getTorrent(ids, fields = defaultFields, notFields = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = {};
            ids = this.convertIds(ids);
            if (ids)
                options.ids = ids;
            fields = fields.filter(item => !(~notFields.indexOf(item)));
            fields.push("id");
            fields.push("name");
            if (fields.indexOf("files") > -1) {
                fields.push("fileStats");
            }
            if (fields.indexOf("trackers") > -1) {
                fields.push("trackerStats");
            }
            options["fields"] = fields;
            let req = new Communication_1.TransmissionRequest("torrent-get", options);
            let res = yield this.sendRequest(req);
            let x = [];
            for (var i = 0; i < res.arguments["torrents"].length; i++) {
                var element = res.arguments["torrents"][i];
                let torrent = new Torrent_1.Torrent(this, fields).deserialize(element);
                x.push(torrent);
            }
            if (x.length == 1)
                return x[0];
            else
                return x;
        });
    }
    removeTorrent(ids, deleteData = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = {};
            ids = this.convertIds(ids);
            if (ids)
                options.ids = ids;
            options["delete-local-data"] = deleteData;
            let req = new Communication_1.TransmissionRequest("torrent-remove", options);
            let res = yield this.sendRequest(req);
        });
    }
    addTorrent(file, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof file === 'string') {
                let fileObj = url.parse(file);
                if (!fileObj.protocol) {
                    try {
                        fs.statSync(fileObj.href);
                        options = Object.assign({}, options, { filename: fileObj.href });
                    }
                    catch (e) {
                        options = Object.assign({}, options, { metainfo: fileObj.href });
                    }
                }
                else {
                    options = Object.assign({}, options, { filename: fileObj.href });
                }
            }
            else {
                options = Object.assign({}, options, { metainfo: file.toString('base64') });
            }
            let req = new Communication_1.TransmissionRequest("torrent-add", options);
            let res = yield this.sendRequest(req);
            return res.arguments;
        });
    }
    setTorrentLocation(ids, options) {
        return __awaiter(this, void 0, void 0, function* () {
            ids = this.convertIds(ids);
            if (ids && !options.ids)
                options.ids = ids;
            let req = new Communication_1.TransmissionRequest("torrent-set-location", options);
            let res = yield this.sendRequest(req);
        });
    }
    renameTorrentPath(id, path, name) {
        return __awaiter(this, void 0, void 0, function* () {
            let ids = this.convertIds([id]);
            let req = new Communication_1.TransmissionRequest("torrent-rename-path", { ids, path, name });
            let res = yield this.sendRequest(req);
            return res.arguments;
        });
    }
    setTorrentProperties(ids, options) {
        return __awaiter(this, void 0, void 0, function* () {
            ids = this.convertIds(ids);
            if (ids && !options.ids)
                options.ids = ids;
            let req = new Communication_1.TransmissionRequest("torrent-set", options);
            let res = yield this.sendRequest(req);
        });
    }
    getSession() {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("session-get", {});
            let res = yield this.sendRequest(req);
            return new Session_1.Session(this).deserialize(res.arguments);
        });
    }
    setSessionProperties(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("session-set", options);
            yield this.sendRequest(req);
        });
    }
    sendRequest(trequest) {
        return __awaiter(this, void 0, void 0, function* () {
            this.emit("request", trequest);
            return new Promise((resolve, reject) => {
                let failed = false;
                let reqopts = {};
                if (this.options.port)
                    reqopts.port = this.options.port;
                if (this.options.path)
                    reqopts.path = this.options.path;
                if (this.options.host)
                    reqopts.hostname = this.options.host;
                if (this.options.protocol)
                    reqopts.protocol = this.options.protocol;
                if (this.needsAuth)
                    reqopts.auth = this.auth;
                reqopts.method = "POST";
                reqopts.headers = {};
                if (this.sessionID)
                    reqopts.headers["x-transmission-session-id"] = this.sessionID;
                reqopts.headers["content-type"] = "application/json";
                const req = http.request(reqopts, res => {
                    if (res.statusCode < 200 || res.statusCode > 299) {
                        failed = true;
                        if (res.statusCode == 409) {
                            this.sessionID = res.headers["x-transmission-session-id"];
                            resolve(this.sendRequest(trequest));
                        }
                        else
                            reject(new Error("Failed to load: " + res.statusCode));
                    }
                    let data = "";
                    let decoder = new sd.StringDecoder("utf-8");
                    res.on("data", chunk => {
                        let textChunk = decoder.write(chunk);
                        data += textChunk;
                    });
                    res.on("end", () => {
                        if (!failed) {
                            let result = JSON.parse(data);
                            this.emit("response", result);
                            if (result.result != "success")
                                reject(result.result);
                            else
                                resolve(result);
                        }
                    });
                });
                req.on("error", err => reject(err));
                req.write(JSON.stringify(trequest));
                req.end();
            });
        });
    }
}
exports.Client = Client;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQzs0QkFDOUIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUM7Z0NBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQzs0QkFDdEQsSUFBSTtnQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ3pCLENBQUM7b0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDcEMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0tBQUE7Q0FFSjtBQS9QRCx3QkErUEMiLCJmaWxlIjoibGliL0NsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGh0dHAgZnJvbSBcImh0dHBcIjtcbmltcG9ydCAqIGFzIHNkIGZyb20gXCJzdHJpbmdfZGVjb2RlclwiO1xuaW1wb3J0ICogYXMgRXZlbnRFbWl0dGVyICBmcm9tIFwiZXZlbnRzXCI7XG5pbXBvcnQgKiBhcyB1cmwgZnJvbSBcInVybFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBUcmFuc21pc3Npb25SZXF1ZXN0LCBUcmFuc21pc3Npb25SZXNwb25zZSB9IGZyb20gXCIuL0NvbW11bmljYXRpb25cIjtcbmltcG9ydCB7IFNlc3Npb24sIElTZXNzaW9uLCBTZXNzaW9uU2V0T3B0aW9ucyB9IGZyb20gXCIuL1Nlc3Npb25cIjtcbmltcG9ydCB7IFRvcnJlbnQsIElUb3JyZW50LCBTZXRUb3JyZW50T3B0aW9ucywgU2V0TG9jYXRpb25PcHRpb25zLCBSZW5hbWVUb3JyZW50UmVzcG9uc2UsIEFkZFRvcnJlbnRPcHRpb25zIH0gZnJvbSBcIi4vVG9ycmVudFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpZW50T3B0aW9ucyB7XG4gICAgcHJvdG9jb2w/OiBzdHJpbmc7XG4gICAgcGF0aD86IHN0cmluZztcbiAgICBob3N0Pzogc3RyaW5nO1xuICAgIHBvcnQ/OiBudW1iZXI7XG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ/OiBzdHJpbmc7XG59XG5cbmNvbnN0IGRlZmF1bHRPcHRzOiBDbGllbnRPcHRpb25zID0ge1xuICAgIHByb3RvY29sOiBcImh0dHA6XCIsXG4gICAgaG9zdDogXCIxMjcuMC4wLjFcIixcbiAgICBwYXRoOiBcIi90cmFuc21pc3Npb24vcnBjXCIsXG4gICAgcG9ydDogOTA5MSxcbiAgICB1c2VybmFtZTogbnVsbCxcbiAgICBwYXNzd29yZDogbnVsbFxufVxuXG5jb25zdCBkZWZhdWx0RmllbGRzOiBzdHJpbmdbXSA9IFtcbiAgICBcImFjdGl2aXR5RGF0ZVwiLCBcImFkZGVkRGF0ZVwiLCBcImJhbmR3aWR0aFByaW9yaXR5XCIsIFwiY29tbWVudFwiLFxuICAgIFwiY29ycnVwdEV2ZXJcIiwgXCJjcmVhdG9yXCIsIFwiZGF0ZUNyZWF0ZWRcIiwgXCJkZXNpcmVkQXZhaWxhYmxlXCIsXG4gICAgXCJkb25lRGF0ZVwiLCBcImRvd25sb2FkRGlyXCIsIFwiZG93bmxvYWRlZEV2ZXJcIiwgXCJkb3dubG9hZExpbWl0XCIsXG4gICAgXCJkb3dubG9hZExpbWl0ZWRcIiwgXCJlcnJvclwiLCBcImVycm9yU3RyaW5nXCIsIFwiZXRhXCIsXG4gICAgXCJldGFJZGxlXCIsIFwiZmlsZXNcIiwgXCJmaWxlU3RhdHNcIiwgXCJoYXNoU3RyaW5nXCIsXG4gICAgXCJoYXZlVW5jaGVja2VkXCIsIFwiaGF2ZVZhbGlkXCIsIFwiaG9ub3JzU2Vzc2lvbkxpbWl0c1wiLFxuICAgIFwiaXNGaW5pc2hlZFwiLCBcImlzUHJpdmF0ZVwiLCBcImlzU3RhbGxlZFwiLCBcImxlZnRVbnRpbERvbmVcIixcbiAgICBcIm1hZ25ldExpbmtcIiwgXCJtYW51YWxBbm5vdW5jZVRpbWVcIiwgXCJtYXhDb25uZWN0ZWRQZWVyc1wiLFxuICAgIFwibWV0YWRhdGFQZXJjZW50Q29tcGxldGVcIiwgXCJuYW1lXCIsIFwicGVlci1saW1pdFwiLCBcInBlZXJzXCIsXG4gICAgXCJwZWVyc0Nvbm5lY3RlZFwiLCBcInBlZXJzRnJvbVwiLCBcInBlZXJzR2V0dGluZ0Zyb21Vc1wiLFxuICAgIFwicGVlcnNTZW5kaW5nVG9Vc1wiLCBcInBlcmNlbnREb25lXCIsIFwicGllY2VzXCIsIFwicGllY2VDb3VudFwiLFxuICAgIFwicGllY2VTaXplXCIsIFwicHJpb3JpdGllc1wiLCBcInF1ZXVlUG9zaXRpb25cIiwgXCJyYXRlRG93bmxvYWRcIixcbiAgICBcInJhdGVVcGxvYWRcIiwgXCJyZWNoZWNrUHJvZ3Jlc3NcIiwgXCJzZWNvbmRzRG93bmxvYWRpbmdcIixcbiAgICBcInNlY29uZHNTZWVkaW5nXCIsIFwic2VlZElkbGVMaW1pdFwiLCBcInNlZWRJZGxlTW9kZVwiLCBcInNlZWRSYXRpb0xpbWl0XCIsXG4gICAgXCJzZWVkUmF0aW9Nb2RlXCIsIFwic2l6ZVdoZW5Eb25lXCIsIFwic3RhcnREYXRlXCIsIFwic3RhdHVzXCIsXG4gICAgXCJ0cmFja2Vyc1wiLCBcInRyYWNrZXJTdGF0c1wiLCBcInRvdGFsU2l6ZVwiLCBcInRvcnJlbnRGaWxlXCIsXG4gICAgXCJ1cGxvYWRlZEV2ZXJcIiwgXCJ1cGxvYWRMaW1pdFwiLCBcInVwbG9hZExpbWl0ZWRcIiwgXCJ1cGxvYWRSYXRpb1wiLFxuICAgIFwid2FudGVkXCIsIFwid2Vic2VlZHNcIiwgXCJ3ZWJzZWVkc1NlbmRpbmdUb1VzXCJcbl1cblxuZXhwb3J0IGNsYXNzIENsaWVudCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgcHJpdmF0ZSBuZWVkc0F1dGg6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGF1dGg6IHN0cmluZztcbiAgICBwcml2YXRlIHNlc3Npb25JRDogc3RyaW5nO1xuICAgIG9wdGlvbnM6IENsaWVudE9wdGlvbnM7XG4gICAgY29uc3RydWN0b3Ioc2Vzc2lvbklEOiBzdHJpbmcgPSBudWxsLCBvcHRpb25zOiBDbGllbnRPcHRpb25zID0gZGVmYXVsdE9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdHMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoc2Vzc2lvbklEKSB0aGlzLnNlc3Npb25JRCA9IHNlc3Npb25JRDtcbiAgICAgICAgaWYgKG9wdGlvbnMudXNlcm5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMubmVlZHNBdXRoID0gdHJ1ZVxuICAgICAgICAgICAgdGhpcy5hdXRoID0gb3B0aW9ucy51c2VybmFtZSArIFwiOlwiICsgb3B0aW9ucy5wYXNzd29yZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVtaXQoZXZlbnQ6IFwicmVzcG9uc2VcIiwgZGF0YTogVHJhbnNtaXNzaW9uUmVzcG9uc2UpOiBib29sZWFuXG4gICAgZW1pdChldmVudDogXCJyZXF1ZXN0XCIsIGRhdGE6IFRyYW5zbWlzc2lvblJlcXVlc3QpOiBib29sZWFuXG4gICAgZW1pdChldmVudDogXCJyZXNwb25zZVwifFwicmVxdWVzdFwiLCBkYXRhOmFueSk6Ym9vbGVhbiB7IHJldHVybiBzdXBlci5lbWl0KGV2ZW50LGRhdGEpIH1cbiAgICBvbihldmVudDogXCJyZXNwb25zZVwiLCBsaXN0ZW5lcjogKGRhdGE6IFRyYW5zbWlzc2lvblJlc3BvbnNlKSA9PiB2b2lkKTogdGhpc1xuICAgIG9uKGV2ZW50OiBcInJlcXVlc3RcIiwgbGlzdGVuZXI6IChkYXRhOiBUcmFuc21pc3Npb25SZXF1ZXN0KSA9PiB2b2lkKTogdGhpc1xuICAgIG9uKGV2ZW50OiBcInJlc3BvbnNlXCJ8XCJyZXF1ZXN0XCIsIGxpc3RlbmVyOiAoZGF0YTogYW55KSA9PiB2b2lkKTogdGhpcyB7IHJldHVybiBzdXBlci5vbihldmVudCxsaXN0ZW5lcik7IH1cbiAgICBvbmNlKGV2ZW50OiBcInJlc3BvbnNlXCIsIGxpc3RlbmVyOiAoZGF0YTogVHJhbnNtaXNzaW9uUmVzcG9uc2UpID0+IHZvaWQpOiB0aGlzXG4gICAgb25jZShldmVudDogXCJyZXF1ZXN0XCIsIGxpc3RlbmVyOiAoZGF0YTogVHJhbnNtaXNzaW9uUmVxdWVzdCkgPT4gdm9pZCk6IHRoaXNcbiAgICBvbmNlKGV2ZW50OiBcInJlc3BvbnNlXCJ8XCJyZXF1ZXN0XCIsIGxpc3RlbmVyOiAoZGF0YTogYW55KSA9PiB2b2lkKTogdGhpcyB7IHJldHVybiBzdXBlci5vbmNlKGV2ZW50LGxpc3RlbmVyKTsgfVxuICAgIGFkZExpc3RlbmVyKGV2ZW50OiBcInJlc3BvbnNlXCIsIGxpc3RlbmVyOiAoZGF0YTogVHJhbnNtaXNzaW9uUmVzcG9uc2UpID0+IHZvaWQpOiB0aGlzXG4gICAgYWRkTGlzdGVuZXIoZXZlbnQ6IFwicmVxdWVzdFwiLCBsaXN0ZW5lcjogKGRhdGE6IFRyYW5zbWlzc2lvblJlcXVlc3QpID0+IHZvaWQpOiB0aGlzXG4gICAgYWRkTGlzdGVuZXIoZXZlbnQ6IFwicmVzcG9uc2VcInxcInJlcXVlc3RcIiwgbGlzdGVuZXI6IChkYXRhOiBhbnkpID0+IHZvaWQpOiB0aGlzIHsgcmV0dXJuIHN1cGVyLmFkZExpc3RlbmVyKGV2ZW50LGxpc3RlbmVyKTsgfVxuICAgIHByZXBlbmRMaXN0ZW5lcihldmVudDogXCJyZXNwb25zZVwiLCBsaXN0ZW5lcjogKGRhdGE6IFRyYW5zbWlzc2lvblJlc3BvbnNlKSA9PiB2b2lkKTogdGhpc1xuICAgIHByZXBlbmRMaXN0ZW5lcihldmVudDogXCJyZXF1ZXN0XCIsIGxpc3RlbmVyOiAoZGF0YTogVHJhbnNtaXNzaW9uUmVxdWVzdCkgPT4gdm9pZCk6IHRoaXNcbiAgICBwcmVwZW5kTGlzdGVuZXIoZXZlbnQ6IFwicmVzcG9uc2VcInxcInJlcXVlc3RcIiwgbGlzdGVuZXI6IChkYXRhOiBhbnkpID0+IHZvaWQpOiB0aGlzIHsgcmV0dXJuIHN1cGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCxsaXN0ZW5lcik7IH1cbiAgICBwcmVwZW5kT25jZUxpc3RlbmVyKGV2ZW50OiBcInJlc3BvbnNlXCIsIGxpc3RlbmVyOiAoZGF0YTogVHJhbnNtaXNzaW9uUmVzcG9uc2UpID0+IHZvaWQpOiB0aGlzXG4gICAgcHJlcGVuZE9uY2VMaXN0ZW5lcihldmVudDogXCJyZXF1ZXN0XCIsIGxpc3RlbmVyOiAoZGF0YTogVHJhbnNtaXNzaW9uUmVxdWVzdCkgPT4gdm9pZCk6IHRoaXNcbiAgICBwcmVwZW5kT25jZUxpc3RlbmVyKGV2ZW50OiBcInJlc3BvbnNlXCJ8XCJyZXF1ZXN0XCIsIGxpc3RlbmVyOiAoZGF0YTogYW55KSA9PiB2b2lkKTogdGhpcyB7IHJldHVybiBzdXBlci5wcmVwZW5kT25jZUxpc3RlbmVyKGV2ZW50LGxpc3RlbmVyKTsgfVxuICAgIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBcInJlc3BvbnNlXCIsIGxpc3RlbmVyOiAoZGF0YTogVHJhbnNtaXNzaW9uUmVzcG9uc2UpID0+IHZvaWQpOiB0aGlzXG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IFwicmVxdWVzdFwiLCBsaXN0ZW5lcjogKGRhdGE6IFRyYW5zbWlzc2lvblJlcXVlc3QpID0+IHZvaWQpOiB0aGlzXG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IFwicmVzcG9uc2VcInxcInJlcXVlc3RcIiwgbGlzdGVuZXI6IChkYXRhOiBhbnkpID0+IHZvaWQpOiB0aGlzIHsgcmV0dXJuIHN1cGVyLnJlbW92ZUxpc3RlbmVyKGV2ZW50LGxpc3RlbmVyKTsgfVxuXG5cbiAgICBwcml2YXRlIGNvbnZlcnRJZHMocmVjZW50OiBcInJlY2VudGx5LWFjdGl2ZVwiKTogc3RyaW5nXG4gICAgcHJpdmF0ZSBjb252ZXJ0SWRzKHRvcnJlbnQ6IFRvcnJlbnQpOiBudW1iZXJcbiAgICBwcml2YXRlIGNvbnZlcnRJZHModG9ycmVudHM6IFRvcnJlbnRbXSk6IG51bWJlcltdXG4gICAgcHJpdmF0ZSBjb252ZXJ0SWRzKGlkOiBudW1iZXIpOiBudW1iZXJcbiAgICBwcml2YXRlIGNvbnZlcnRJZHMoaWRzOiBudW1iZXJbXSk6IG51bWJlcltdXG4gICAgcHJpdmF0ZSBjb252ZXJ0SWRzKGhhc2g6IHN0cmluZyk6IHN0cmluZ1xuICAgIHByaXZhdGUgY29udmVydElkcyhoYXNoZXM6IHN0cmluZ1tdKTogc3RyaW5nW11cbiAgICBwcml2YXRlIGNvbnZlcnRJZHMoaWRzOiBhbnkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaWRzKSAmJiBpZHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGlkcyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaWRzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlkcyA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShpZHMpKSB7XG4gICAgICAgICAgICAgICAgaWRzID0gKDxUb3JyZW50PmlkcykuaWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWRzKSAmJiB0eXBlb2YgaWRzWzBdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgaWRzID0gKDxUb3JyZW50W10+aWRzKS5tYXAoZWxlbSA9PiB7IHJldHVybiBlbGVtLmlkIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWxzZSBpcyBudW1iZXJbXSBvciBzdHJpbmdbXSBvciBudW1iZXIgb3Igc3RyaW5nXG5cbiAgICAgICAgcmV0dXJuIGlkcztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGxUb3JyZW50cyhmaWVsZHM6IHN0cmluZ1tdID0gZGVmYXVsdEZpZWxkcywgbm90RmllbGRzOiBzdHJpbmdbXSA9IFtdKTogUHJvbWlzZTxUb3JyZW50W10+IHtcbiAgICAgICAgbGV0IHRvcnJlbnRzID0gYXdhaXQgdGhpcy5nZXRUb3JyZW50KG51bGwsIGZpZWxkcywgbm90RmllbGRzKTtcbiAgICAgICAgaWYgKCF0b3JyZW50cy5sZW5ndGgpIHJldHVybiBbPGFueT50b3JyZW50cyBhcyBUb3JyZW50XTtcbiAgICAgICAgZWxzZSByZXR1cm4gdG9ycmVudHM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VG9ycmVudChyZWNlbnQ6IFwicmVjZW50bHktYWN0aXZlXCIsIGZpZWxkcz86IHN0cmluZ1tdLCBub3RGaWVsZHM/OiBzdHJpbmdbXSk6IFByb21pc2U8VG9ycmVudFtdPlxuICAgIC8vIGRvZXNuJ3QgbWFrZSBzZW5zZSwgYnV0IG1pZ2h0IGFzIHdlbGwgaW5jbHVkZSBpdCBmb3IgY29uc2lzdGVuY3lcbiAgICBhc3luYyBnZXRUb3JyZW50KHRvcnJlbnQ6IFRvcnJlbnQsIGZpZWxkcz86IHN0cmluZ1tdLCBub3RGaWVsZHM/OiBzdHJpbmdbXSk6IFByb21pc2U8VG9ycmVudD5cbiAgICBhc3luYyBnZXRUb3JyZW50KHRvcnJlbnRzOiBUb3JyZW50W10sIGZpZWxkcz86IHN0cmluZ1tdLCBub3RGaWVsZHM/OiBzdHJpbmdbXSk6IFByb21pc2U8VG9ycmVudFtdPlxuICAgIGFzeW5jIGdldFRvcnJlbnQoaWQ6IG51bWJlciwgZmllbGRzPzogc3RyaW5nW10sIG5vdEZpZWxkcz86IHN0cmluZ1tdKTogUHJvbWlzZTxUb3JyZW50PlxuICAgIGFzeW5jIGdldFRvcnJlbnQoaWRzOiBudW1iZXJbXSwgZmllbGRzPzogc3RyaW5nW10sIG5vdEZpZWxkcz86IHN0cmluZ1tdKTogUHJvbWlzZTxUb3JyZW50W10+XG4gICAgYXN5bmMgZ2V0VG9ycmVudChoYXNoOiBzdHJpbmcsIGZpZWxkcz86IHN0cmluZ1tdLCBub3RGaWVsZHM/OiBzdHJpbmdbXSk6IFByb21pc2U8VG9ycmVudD5cbiAgICBhc3luYyBnZXRUb3JyZW50KGhhc2hlczogc3RyaW5nW10sIGZpZWxkcz86IHN0cmluZ1tdLCBub3RGaWVsZHM/OiBzdHJpbmdbXSk6IFByb21pc2U8VG9ycmVudFtdPlxuICAgIGFzeW5jIGdldFRvcnJlbnQoaWRzOiBhbnksIGZpZWxkczogc3RyaW5nW10gPSBkZWZhdWx0RmllbGRzLCBub3RGaWVsZHM6IHN0cmluZ1tdID0gW10pIHtcbiAgICAgICAgbGV0IG9wdGlvbnM6IGFueSA9IHt9O1xuICAgICAgICBpZHMgPSB0aGlzLmNvbnZlcnRJZHMoaWRzKTtcbiAgICAgICAgaWYgKGlkcylcbiAgICAgICAgICAgIG9wdGlvbnMuaWRzID0gaWRzO1xuXG4gICAgICAgIGZpZWxkcyA9IGZpZWxkcy5maWx0ZXIoaXRlbSA9PiAhKH5ub3RGaWVsZHMuaW5kZXhPZihpdGVtKSkpO1xuICAgICAgICBmaWVsZHMucHVzaChcImlkXCIpO1xuICAgICAgICBmaWVsZHMucHVzaChcIm5hbWVcIik7XG5cbiAgICAgICAgaWYgKGZpZWxkcy5pbmRleE9mKFwiZmlsZXNcIikgPiAtMSkge1xuICAgICAgICAgICAgLy8gd2UgY291bGQgZG8gYSBjaGVjayB3aGV0aGVyIGZpbGVTdGF0cyBkb2Vzbid0IGV4aXN0LCBidXQgdGhlIHNlcnZlciBkb2Vzbid0IGNhcmUgYWJvdXQgbXVsdGlwbGVzXG4gICAgICAgICAgICBmaWVsZHMucHVzaChcImZpbGVTdGF0c1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWVsZHMuaW5kZXhPZihcInRyYWNrZXJzXCIpID4gLTEpIHtcbiAgICAgICAgICAgIGZpZWxkcy5wdXNoKFwidHJhY2tlclN0YXRzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9uc1tcImZpZWxkc1wiXSA9IGZpZWxkcztcblxuICAgICAgICBsZXQgcmVxID0gbmV3IFRyYW5zbWlzc2lvblJlcXVlc3QoXCJ0b3JyZW50LWdldFwiLCBvcHRpb25zKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHRoaXMuc2VuZFJlcXVlc3QocmVxKTtcbiAgICAgICAgbGV0IHg6IFRvcnJlbnRbXSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmFyZ3VtZW50c1tcInRvcnJlbnRzXCJdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IDxJVG9ycmVudD5yZXMuYXJndW1lbnRzW1widG9ycmVudHNcIl1baV07XG4gICAgICAgICAgICBsZXQgdG9ycmVudCA9IG5ldyBUb3JyZW50KHRoaXMsIGZpZWxkcykuZGVzZXJpYWxpemUoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIHgucHVzaCh0b3JyZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4Lmxlbmd0aCA9PSAxKVxuICAgICAgICAgICAgcmV0dXJuIHhbMF07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIGFzeW5jIHJlbW92ZVRvcnJlbnQocmVjZW50OiBcInJlY2VudGx5LWFjdGl2ZVwiLCBkZWxldGVEYXRhPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgcmVtb3ZlVG9ycmVudCh0b3JyZW50OiBUb3JyZW50LCBkZWxldGVEYXRhPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgcmVtb3ZlVG9ycmVudCh0b3JyZW50czogVG9ycmVudFtdLCBkZWxldGVEYXRhPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgcmVtb3ZlVG9ycmVudChpZDogbnVtYmVyLCBkZWxldGVEYXRhPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgcmVtb3ZlVG9ycmVudChpZHM6IG51bWJlcltdLCBkZWxldGVEYXRhPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgcmVtb3ZlVG9ycmVudChoYXNoOiBzdHJpbmcsIGRlbGV0ZURhdGE/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyByZW1vdmVUb3JyZW50KGhhc2hlczogc3RyaW5nW10sIGRlbGV0ZURhdGE/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyByZW1vdmVUb3JyZW50KGlkczogYW55LCBkZWxldGVEYXRhOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IG9wdGlvbnM6IGFueSA9IHt9O1xuICAgICAgICBpZHMgPSB0aGlzLmNvbnZlcnRJZHMoaWRzKTtcbiAgICAgICAgaWYgKGlkcylcbiAgICAgICAgICAgIG9wdGlvbnMuaWRzID0gaWRzO1xuICAgICAgICBvcHRpb25zW1wiZGVsZXRlLWxvY2FsLWRhdGFcIl0gPSBkZWxldGVEYXRhO1xuICAgICAgICBsZXQgcmVxID0gbmV3IFRyYW5zbWlzc2lvblJlcXVlc3QoXCJ0b3JyZW50LXJlbW92ZVwiLCBvcHRpb25zKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHRoaXMuc2VuZFJlcXVlc3QocmVxKTtcbiAgICB9XG5cbiAgICBhc3luYyBhZGRUb3JyZW50KGZpbGU6IHN0cmluZywgb3B0aW9ucz86IEFkZFRvcnJlbnRPcHRpb25zKTogUHJvbWlzZTxJVG9ycmVudD5cbiAgICBhc3luYyBhZGRUb3JyZW50KGZpbGU6IEJ1ZmZlciwgb3B0aW9ucz86IEFkZFRvcnJlbnRPcHRpb25zKTogUHJvbWlzZTxJVG9ycmVudD5cbiAgICBhc3luYyBhZGRUb3JyZW50KGZpbGU6IGFueSwgb3B0aW9ucz86IEFkZFRvcnJlbnRPcHRpb25zKTogUHJvbWlzZTxJVG9ycmVudD4ge1xuICAgICAgICBpZiAodHlwZW9mIGZpbGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBsZXQgZmlsZU9iaiA9IHVybC5wYXJzZShmaWxlKTtcbiAgICAgICAgICAgIGlmICghZmlsZU9iai5wcm90b2NvbCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZzLnN0YXRTeW5jKGZpbGVPYmouaHJlZik7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGZpbGVuYW1lOiBmaWxlT2JqLmhyZWYgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpcyBiYXNlNjQgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGFpbmZvOiBmaWxlT2JqLmhyZWYgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGZpbGVuYW1lOiBmaWxlT2JqLmhyZWYgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGFpbmZvOiAoPEJ1ZmZlcj5maWxlKS50b1N0cmluZygnYmFzZTY0Jyl9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXEgPSBuZXcgVHJhbnNtaXNzaW9uUmVxdWVzdChcInRvcnJlbnQtYWRkXCIsIG9wdGlvbnMpO1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXEpO1xuICAgICAgICByZXR1cm4gPElUb3JyZW50PnJlcy5hcmd1bWVudHM7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0VG9ycmVudExvY2F0aW9uKHJlY2VudDogXCJyZWNlbnRseS1hY3RpdmVcIiwgb3B0aW9uczogU2V0TG9jYXRpb25PcHRpb25zKTogUHJvbWlzZTx2b2lkPlxuICAgIGFzeW5jIHNldFRvcnJlbnRMb2NhdGlvbih0b3JyZW50OiBUb3JyZW50LCBvcHRpb25zOiBTZXRMb2NhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+XG4gICAgYXN5bmMgc2V0VG9ycmVudExvY2F0aW9uKHRvcnJlbnRzOiBUb3JyZW50W10sIG9wdGlvbnM6IFNldExvY2F0aW9uT3B0aW9ucyk6IFByb21pc2U8dm9pZD5cbiAgICBhc3luYyBzZXRUb3JyZW50TG9jYXRpb24oaWQ6IG51bWJlciwgb3B0aW9uczogU2V0TG9jYXRpb25PcHRpb25zKTogUHJvbWlzZTx2b2lkPlxuICAgIGFzeW5jIHNldFRvcnJlbnRMb2NhdGlvbihpZHM6IG51bWJlcltdLCBvcHRpb25zOiBTZXRMb2NhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+XG4gICAgYXN5bmMgc2V0VG9ycmVudExvY2F0aW9uKGhhc2g6IHN0cmluZywgb3B0aW9uczogU2V0TG9jYXRpb25PcHRpb25zKTogUHJvbWlzZTx2b2lkPlxuICAgIGFzeW5jIHNldFRvcnJlbnRMb2NhdGlvbihoYXNoZXM6IHN0cmluZ1tdLCBvcHRpb25zOiBTZXRMb2NhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+XG4gICAgYXN5bmMgc2V0VG9ycmVudExvY2F0aW9uKGlkczogYW55LCBvcHRpb25zOiBTZXRMb2NhdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgaWRzID0gdGhpcy5jb252ZXJ0SWRzKGlkcyk7XG4gICAgICAgIGlmIChpZHMgJiYgIW9wdGlvbnMuaWRzKVxuICAgICAgICAgICAgb3B0aW9ucy5pZHMgPSBpZHM7XG4gICAgICAgIGxldCByZXEgPSBuZXcgVHJhbnNtaXNzaW9uUmVxdWVzdChcInRvcnJlbnQtc2V0LWxvY2F0aW9uXCIsIG9wdGlvbnMpO1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXEpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlbmFtZVRvcnJlbnRQYXRoKGhhc2g6IHN0cmluZywgcGF0aDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFJlbmFtZVRvcnJlbnRSZXNwb25zZT5cbiAgICBhc3luYyByZW5hbWVUb3JyZW50UGF0aCh0b3JyZW50OiBUb3JyZW50LCBwYXRoOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8UmVuYW1lVG9ycmVudFJlc3BvbnNlPlxuICAgIGFzeW5jIHJlbmFtZVRvcnJlbnRQYXRoKGlkOiBudW1iZXIsIHBhdGg6IHN0cmluZywgbmFtZTogc3RyaW5nKTogUHJvbWlzZTxSZW5hbWVUb3JyZW50UmVzcG9uc2U+XG4gICAgYXN5bmMgcmVuYW1lVG9ycmVudFBhdGgoaWQ6IGFueSwgcGF0aDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFJlbmFtZVRvcnJlbnRSZXNwb25zZT4ge1xuICAgICAgICBsZXQgaWRzID0gdGhpcy5jb252ZXJ0SWRzKFtpZF0pO1xuICAgICAgICBsZXQgcmVxID0gbmV3IFRyYW5zbWlzc2lvblJlcXVlc3QoXCJ0b3JyZW50LXJlbmFtZS1wYXRoXCIsIHsgaWRzLCBwYXRoLCBuYW1lIH0pO1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXEpO1xuXG4gICAgICAgIHJldHVybiA8UmVuYW1lVG9ycmVudFJlc3BvbnNlPnJlcy5hcmd1bWVudHM7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0VG9ycmVudFByb3BlcnRpZXMocmVjZW50OiBcInJlY2VudGx5LWFjdGl2ZVwiLCBvcHRpb25zOiBTZXRUb3JyZW50T3B0aW9ucyk6IFByb21pc2U8dm9pZD5cbiAgICBhc3luYyBzZXRUb3JyZW50UHJvcGVydGllcyh0b3JyZW50OiBUb3JyZW50LCBvcHRpb25zOiBTZXRUb3JyZW50T3B0aW9ucyk6IFByb21pc2U8dm9pZD5cbiAgICBhc3luYyBzZXRUb3JyZW50UHJvcGVydGllcyh0b3JyZW50czogVG9ycmVudFtdLCBvcHRpb25zOiBTZXRUb3JyZW50T3B0aW9ucyk6IFByb21pc2U8dm9pZD5cbiAgICBhc3luYyBzZXRUb3JyZW50UHJvcGVydGllcyhpZDogbnVtYmVyLCBvcHRpb25zOiBTZXRUb3JyZW50T3B0aW9ucyk6IFByb21pc2U8dm9pZD5cbiAgICBhc3luYyBzZXRUb3JyZW50UHJvcGVydGllcyhpZHM6IG51bWJlcltdLCBvcHRpb25zOiBTZXRUb3JyZW50T3B0aW9ucyk6IFByb21pc2U8dm9pZD5cbiAgICBhc3luYyBzZXRUb3JyZW50UHJvcGVydGllcyhoYXNoOiBzdHJpbmcsIG9wdGlvbnM6IFNldFRvcnJlbnRPcHRpb25zKTogUHJvbWlzZTx2b2lkPlxuICAgIGFzeW5jIHNldFRvcnJlbnRQcm9wZXJ0aWVzKGhhc2hlczogc3RyaW5nW10sIG9wdGlvbnM6IFNldFRvcnJlbnRPcHRpb25zKTogUHJvbWlzZTx2b2lkPlxuICAgIGFzeW5jIHNldFRvcnJlbnRQcm9wZXJ0aWVzKGlkczogYW55LCBvcHRpb25zOiBTZXRUb3JyZW50T3B0aW9ucykge1xuICAgICAgICBpZHMgPSB0aGlzLmNvbnZlcnRJZHMoaWRzKTtcbiAgICAgICAgaWYgKGlkcyAmJiAhb3B0aW9ucy5pZHMpXG4gICAgICAgICAgICBvcHRpb25zLmlkcyA9IGlkcztcbiAgICAgICAgbGV0IHJlcSA9IG5ldyBUcmFuc21pc3Npb25SZXF1ZXN0KFwidG9ycmVudC1zZXRcIiwgb3B0aW9ucyk7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHJlcSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0U2Vzc2lvbigpOiBQcm9taXNlPFNlc3Npb24+IHtcbiAgICAgICAgbGV0IHJlcSA9IG5ldyBUcmFuc21pc3Npb25SZXF1ZXN0KFwic2Vzc2lvbi1nZXRcIiwge30pO1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyZXEpO1xuICAgICAgICByZXR1cm4gbmV3IFNlc3Npb24odGhpcykuZGVzZXJpYWxpemUoPElTZXNzaW9uPnJlcy5hcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGFzeW5jIHNldFNlc3Npb25Qcm9wZXJ0aWVzKG9wdGlvbnM6IFNlc3Npb25TZXRPcHRpb25zKSB7XG4gICAgICAgIGxldCByZXEgPSBuZXcgVHJhbnNtaXNzaW9uUmVxdWVzdChcInNlc3Npb24tc2V0XCIsIG9wdGlvbnMpO1xuICAgICAgICBhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHJlcSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2VuZFJlcXVlc3QodHJlcXVlc3Q6IFRyYW5zbWlzc2lvblJlcXVlc3QpOiBQcm9taXNlPFRyYW5zbWlzc2lvblJlc3BvbnNlPiB7XG4gICAgICAgIHRoaXMuZW1pdChcInJlcXVlc3RcIix0cmVxdWVzdCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxUcmFuc21pc3Npb25SZXNwb25zZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IGZhaWxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHJlcW9wdHM6IGh0dHAuUmVxdWVzdE9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucG9ydCkgcmVxb3B0cy5wb3J0ID0gdGhpcy5vcHRpb25zLnBvcnQ7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdGgpIHJlcW9wdHMucGF0aCA9IHRoaXMub3B0aW9ucy5wYXRoO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ob3N0KSByZXFvcHRzLmhvc3RuYW1lID0gdGhpcy5vcHRpb25zLmhvc3Q7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByb3RvY29sKSByZXFvcHRzLnByb3RvY29sID0gdGhpcy5vcHRpb25zLnByb3RvY29sO1xuICAgICAgICAgICAgaWYgKHRoaXMubmVlZHNBdXRoKSByZXFvcHRzLmF1dGggPSB0aGlzLmF1dGg7XG5cbiAgICAgICAgICAgIHJlcW9wdHMubWV0aG9kID0gXCJQT1NUXCI7XG4gICAgICAgICAgICByZXFvcHRzLmhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlc3Npb25JRClcbiAgICAgICAgICAgICAgICByZXFvcHRzLmhlYWRlcnNbXCJ4LXRyYW5zbWlzc2lvbi1zZXNzaW9uLWlkXCJdID0gdGhpcy5zZXNzaW9uSUQ7XG4gICAgICAgICAgICByZXFvcHRzLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcblxuICAgICAgICAgICAgY29uc3QgcmVxID0gaHR0cC5yZXF1ZXN0KHJlcW9wdHMsIHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlIDwgMjAwIHx8IHJlcy5zdGF0dXNDb2RlID4gMjk5KSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PSA0MDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vzc2lvbklEID0gcmVzLmhlYWRlcnNbXCJ4LXRyYW5zbWlzc2lvbi1zZXNzaW9uLWlkXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnNlbmRSZXF1ZXN0KHRyZXF1ZXN0KSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gbG9hZDogXCIgKyByZXMuc3RhdHVzQ29kZSkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGRhdGE6IHN0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgbGV0IGRlY29kZXIgPSBuZXcgc2QuU3RyaW5nRGVjb2RlcihcInV0Zi04XCIpO1xuICAgICAgICAgICAgICAgIHJlcy5vbihcImRhdGFcIiwgY2h1bmsgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dENodW5rID0gZGVjb2Rlci53cml0ZSg8QnVmZmVyPmNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSArPSB0ZXh0Q2h1bms7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVzLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmYWlsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSA8VHJhbnNtaXNzaW9uUmVzcG9uc2U+SlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInJlc3BvbnNlXCIsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdCAhPSBcInN1Y2Nlc3NcIikgcmVqZWN0KHJlc3VsdC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgICAgIHJlcS53cml0ZShKU09OLnN0cmluZ2lmeSh0cmVxdWVzdCkpO1xuICAgICAgICAgICAgcmVxLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn0iXX0=
